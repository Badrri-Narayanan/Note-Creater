{"version":3,"sources":["components/custom-button/custom-button.component.jsx","components/input-field/input-field.component.jsx","components/task-list/task-list.component.jsx","redux/list_of_tasks/list_of_tasks.actions.js","App.js","redux/new_item/new_item.actions.js","reportWebVitals.js","redux/list_of_tasks/list_of_tasks.utils.js","redux/list_of_tasks/list_of_tasks.reducer.js","redux/new_item/new_item.reducer.js","redux/root-reducer.js","redux/store/store.js","index.js"],"names":["CustomButton","children","otherProps","className","InputField","connect","state","list_of_tasks","task_list","dispatch","removeFromList","id","type","payload","map","task","onClick","App","onInputChange","event","props","setNewItem","target","value","AddItemToList","new_item","addToList","this","setTaskList","placeholder","onChange","React","Component","new_item_value","tasks","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","addItemToList","removeItemFromList","index","new_tasks","splice","INITIAL_STATE","newItemReducer","action","rootReducer","combineReducers","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a754655.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './custom-button.styles.css'\r\n\r\nconst CustomButton = ({children, ...otherProps}) => (\r\n    <div className=\"custom-button\" >\r\n        <button {...otherProps}>\r\n            {children}\r\n        </button>\r\n    </div>\r\n);\r\n\r\nexport default CustomButton;","import React from 'react'\r\n\r\nimport './input-field.styles.css'\r\n\r\nconst InputField = ({ ...otherProps}) => (\r\n    <div className=\"input-field\" >\r\n        <input {...otherProps} />\r\n    </div>\r\n);\r\n\r\nexport default InputField;","import React from 'react'\r\nimport CustomButton from '../custom-button/custom-button.component'\r\n\r\nimport {connect} from 'react-redux'\r\nimport {removeFromList} from '../../redux/list_of_tasks/list_of_tasks.actions'\r\n\r\nimport './task-list.styles.css'\r\n\r\nconst TaskList = ({list_of_tasks, removeFromList}) => (\r\n    <div className=\"task-list\">\r\n        <ol>\r\n            {\r\n                list_of_tasks.map((task, id) => \r\n                    <li key={id}>\r\n                        <span className=\"task-entry\">\r\n                            {task}\r\n                            <CustomButton onClick={() => removeFromList(id)}>\r\n                                &#10060;\r\n                            </CustomButton>\r\n                        </span>\r\n                    </li>\r\n                )\r\n            }\r\n        </ol>\r\n    </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    list_of_tasks: state.task_list.list_of_tasks,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    removeFromList : id => dispatch(removeFromList(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);","export const setTaskList = tasklist => ({\r\n    type : 'SET_LIST_OF_TASKS',\r\n    payload : tasklist,\r\n})\r\n\r\nexport const addToList = item => ({\r\n    type : 'ADD_ITEM_TO_TASKS',\r\n    payload : item,\r\n})\r\n\r\nexport const removeFromList = id => ({\r\n    type : 'REMOVE_ITEM_FROM_TASKS',\r\n    payload : id\r\n})\r\n","import './App.css';\r\nimport React from 'react';\r\nimport CustomButton from './components/custom-button/custom-button.component';\r\nimport InputField from './components/input-field/input-field.component';\r\nimport TaskList from './components/task-list/task-list.component';\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { setTaskList, addToList } from './redux/list_of_tasks/list_of_tasks.actions';\r\nimport { setNewItem } from './redux/new_item/new_item.actions'\r\n\r\nclass App extends React.Component {\r\n\r\n  componentDidMount() {\r\n    let tasks = [\r\n      \"buy groceries\",\r\n      \"water the plants\",\r\n      \"go on a vacation\"\r\n    ];\r\n\r\n    this.props.setTaskList(tasks);\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.props.setNewItem(event.target.value)\r\n  }\r\n\r\n  AddItemToList = () => {\r\n    const {new_item, addToList, setNewItem} = this.props\r\n    if(new_item === \"\") {\r\n      return\r\n    }\r\n    setNewItem(\"\");\r\n    addToList(new_item)\r\n  }\r\n\r\n  render() {\r\n    const {new_item} = this.props;\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>To Do list</h1>\r\n        <div className=\"item-adders\">\r\n          <InputField placeholder=\"Enter Item here...\" value={new_item} type=\"text\" onChange={this.onInputChange} />\r\n          <CustomButton onClick={ this.AddItemToList}>Add Item</CustomButton>\r\n        </div>\r\n        <TaskList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  new_item : state.new_item_value.new_item,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setTaskList: tasks => dispatch(setTaskList(tasks)),\r\n    setNewItem: new_item => dispatch(setNewItem(new_item)),\r\n    addToList: item => dispatch(addToList(item))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","export const setNewItem = (new_item) => ({\r\n    type : 'SET_NEW_ITEM',\r\n    payload : new_item,\r\n})\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const addItemToList = (list_of_tasks,new_item) => {\r\n        let new_task = [\r\n            ...list_of_tasks,\r\n            new_item\r\n        ];\r\n        return new_task\r\n}\r\n\r\nexport const removeItemFromList = (list_of_tasks, index) => {\r\n    let new_tasks = [\r\n        ...list_of_tasks\r\n    ];\r\n    new_tasks.splice(index, 1);\r\n    return new_tasks\r\n}","import {addItemToList, removeItemFromList} from './list_of_tasks.utils'\r\n\r\nconst INITIAL_STATE = {\r\n    list_of_tasks : [],\r\n}\r\n\r\nexport const taskListReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case 'SET_LIST_OF_TASKS':\r\n            return {\r\n                ...state,\r\n                list_of_tasks: action.payload\r\n            }\r\n        case 'ADD_ITEM_TO_TASKS':\r\n            return {\r\n                ...state,\r\n                list_of_tasks: addItemToList(state.list_of_tasks, action.payload)\r\n            }\r\n        case 'REMOVE_ITEM_FROM_TASKS':\r\n            return {\r\n                ...state,\r\n                list_of_tasks: removeItemFromList(state.list_of_tasks, action.payload)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","const INITIAL_STATE = {\r\n    new_item: '',\r\n}\r\n\r\nconst newItemReducer = (state=INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case 'SET_NEW_ITEM':\r\n            return {\r\n                ...state,\r\n                new_item: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default newItemReducer","import {combineReducers} from 'redux'\r\nimport { taskListReducer } from './list_of_tasks/list_of_tasks.reducer'\r\nimport newItemReducer from './new_item/new_item.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    task_list: taskListReducer,\r\n    new_item_value: newItemReducer,\r\n})\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux'\r\nimport logger from 'redux-logger'\r\nimport rootReducer from '../root-reducer'\r\n\r\nconst middleware = []\r\n\r\nif(process.env.NODE_ENV === 'development') {\r\n    middleware.push(logger)\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middleware))\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport {Provider} from 'react-redux'\r\nimport store from './redux/store/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}